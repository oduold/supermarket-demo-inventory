/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.brandlogs.inventory.api.interfaces;

import com.brandlogs.inventory.api.model.Transaction;
import com.brandlogs.inventory.api.model.TransactionDetail;
import com.brandlogs.inventory.api.utils.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Validated
public interface TransactionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /transactions : Add a StockTransaction
     * Add a StockTransaction
     *
     * @param transaction  (optional)
     * @return OK (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "addStockTransaction",
        summary = "Add a StockTransaction",
        tags = { "StockTransactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transactions",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addStockTransaction(
        @Parameter(name = "TransactionDetails", description = "") @Valid @RequestBody(required = true) List<TransactionDetail> transactionDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions/{id} : Retrieve stock transaction data by id
     * StockTransaction data by id
     *
     * @return A StockTransaction&#39;s data (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "stockTransaction",
        summary = "Retrieve stock transaction data by id",
        tags = { "StockTransaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A StockTransaction's data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            }),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Transaction> stockTransaction(
            @Parameter(name = "id", description = "resource id", required = true) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"transactionType\" : { \"code\" : \"code\", \"name\" : \"name\", \"id\" : 6 }, \"quantity\" : 6, \"transactionId\" : 0 }, { \"Item\" : { \"vendor\" : { \"code\" : \"code\", \"name\" : \"name\", \"id\" : 6 }, \"name\" : \"name\", \"id\" : 0 }, \"quantity\" : 6, \"transactionId\" : 0 } ], \"id\" : 0, \"store\" : { \"code\" : \"code\", \"name\" : \"name\", \"id\" : 0 }, \"Vendor\" : { \"code\" : \"code\", \"name\" : \"name\", \"id\" : 6 }, \"transactionDate\" : \"2000-01-23\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /transactions : Retrieve all StockTransactions Detail
     * List of StockTransactions Details
     *
     * @param type transaction type code (optional)
     * @param store store code (optional)
     * @param since Transaction Date from to date (optional)
     * @param from Transaction Date from (optional)
     * @param to Transaction Date to (optional)
     * @return A paged array of StockTransaction Details (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "stockTransactionsDetail",
        summary = "Retrieve all StockTransactions Detail",
        tags = { "StockTransactionsDetails" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of StockTransaction Details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionDetail.class))
            }),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transactions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TransactionDetail>> stockTransactionsDetail(
        @Parameter(name = "type", description = "transaction type code") @Valid @RequestParam(value = "type", required = false) String type,
        @Parameter(name = "store", description = "store code") @Valid @RequestParam(value = "store", required = false) String store,
        @Parameter(name = "since", description = "Transaction Date from to date") @Valid @RequestParam(value = "since", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate since,
        @Parameter(name = "from", description = "Transaction Date from") @Valid @RequestParam(value = "from", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate from,
        @Parameter(name = "to", description = "Transaction Date to") @Valid @RequestParam(value = "to", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate to
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Item\" : { \"vendor\" : { \"code\" : \"code\", \"name\" : \"name\", \"id\" : 6 }, \"name\" : \"name\", \"id\" : 0 }, \"quantity\" : 6, \"transactionId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
