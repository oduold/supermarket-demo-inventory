/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.brandlogs.inventory.api.interfaces;

import com.brandlogs.inventory.api.model.Location;
import com.brandlogs.inventory.api.utils.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Validated
public interface LocationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /locations : Add a Location
     * Add a Location
     *
     * @param location  (optional)
     * @return A Location&#39;s data (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "addLocation",
        summary = "Add a Location",
        tags = { "Locations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A Location's data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Location.class))
            }),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/locations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Location> addLocation(
        @Parameter(name = "Location", description = "") @Valid @RequestBody(required = true) Location location
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /locations/{id} : Retrieve location data by id
     * Location data by id
     *
     * @return A Location&#39;s data (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "location",
        summary = "Retrieve location data by id",
        tags = { "Location" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A Location's data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Location.class))
            }),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/locations/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Location> location(
            @Parameter(name = "id", description = "resource id", required = true) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /locations/{id} : Delete location data by id
     * Location data by id
     *
     * @return A Location&#39;s deleted (status code 204)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "locationDelete",
        summary = "Delete location data by id",
        tags = { "Location" },
        responses = {
            @ApiResponse(responseCode = "204", description = "A Location's deleted"),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/locations/{id}"
    )
    default ResponseEntity<Void> locationDelete(
            @Parameter(name = "id", description = "resource id", required = true) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /locations/{id} : Update location data by id
     * Update Location data by id
     *
     * @param location Update location properties to be changed (optional)
     * @return A Location&#39;s data (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "locationEdit",
        summary = "Update location data by id",
        tags = { "Location" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A Location's data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Location.class))
            }),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/locations/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Location> locationEdit(
        @Parameter(name = "id", description = "resource id", required = true) @PathVariable("id") Long id,
        @Parameter(name = "Location", description = "Update location properties to be changed") @Valid @RequestBody(required = false) Location location
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /locations : Retrieve all Locations
     * List of Locations
     *
     * @return A paged array of Locations (status code 200)
     *         or  (status code 200)
     */
    @Operation(
        operationId = "locations",
        summary = "Retrieve all Locations",
        tags = { "Locations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of Locations", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Location.class))
            }),
            @ApiResponse(responseCode = "200", description = "")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/locations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Location>> locations(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.OK);

    }

}
